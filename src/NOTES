07.07.2016
----------
10,885 rank issues left.

13, cc2ae4 vs 13, cc2ab1
Given PA2Q and PA1T + PA49, PA1Q + PB45 should become PA1Q + PP45.
Not so easy, as we need PA2Q for this as well. (0x11ab)

New numbering for (a) function calls, (b) branches taken.
Use a macro REGISTER.
Turn on dump of a specific branch from command line, no recompile.

03.07.2016
----------
By the way, 12 0x266016 has FixOrCompare(AP1J + AB36, AP46)
and it comes out that AP46 is a better play?!

Can we cut one set of compare calls in MergeDeclarer?

13, 1c2b8f really should be symmetrical.
AKT94, Q, 875, J632.


05.06.2016
----------
DefList special rank fix probably should go again (BB trumps all).

126a
1268
126a

16.05.2016
----------
The rank detector in single.cpp can optionally not recurse, but
instead only output a single specimen of each new cone (i.e. only
when the top of the cone is new, even if it doesn't agree with the
current cone).  Or something like that.


Clean up many branches with separate.pl, once ranks are OK.


07.05.2016
----------
Split LoopHold to make it faster to compile (derived).

Output examples.txt for each holdCtr value.

Maybe shouldn't manually enter rank (derive automatically also
for Simple moves).

Have more generic Set function than Set1123...

---

Annotate all branches with an example.
No more "return false" branches.
Go back to G51.
Count the complex ones left over of each type (G00 .. G63).


Maybe make an input option to control creation of track.txt file.
option goes in MakeComplexSingleMove.

Get examples of broken results from recursion, by looking in
simpleDiff.txt.

-h 7 probably causes early change in singles.  So we should find
those changes and include them as simple moves!

There are more simple moves than I see, e.g. BA5A (asymmetric).

Search for PROBLEM in LoopHold.cpp


Remove GetKeyNew and GetKey
Change internal data structure of Header
Find bounds in Header on new internal data
Experiment with hashes, also end

Thoughts on two-move data structure
-----------------------------------
Look at counts of moves and #d, #a.
Reduce size of arrays.

Can have individual hash functions, or smaller ones, for each type.


PLAN
====
* Get the algorithmic parts completely clean and solid


20.09.2015
----------
Reduction thoughts:
* Distinguish NT and suit play?!  Seems tough
* Defense leads to first trick

Approach:
* Get the simple counts down to 0
* Get the less-simple counts down to 0

SimpleMoves:
* Does loop have to be over declLen, or can we go to 2 loops, not 3?

LoopHold:
* Split full-suit combos out of the 64 functions into
  64 other functions
* Have a single central dispatch function which returns
  one of three histogram codes if it works
* Check that all branches are still active; renumber


General:
* Profile Guided Optimization, blogs.msdn.com/b/vcblog/archive/2008/11/12/pogo.aspx
  msdn.microsoft.com/en-us/library/fsk896zz.aspx
* No more const #define's
* Also compile with g++
* Make command-line interface so that we "never" have to recompile
* As few ints as possible, as few static_casts as possible


-------


20.06.2015
----------
Stopped28(): Rewrite with pa, pl, pp, pr

Call it HIST_STOPPED
Think about a HIST_SYMM (EQUAL and also DIFF)

25.05.15
--------
CashoutPard() must also deal with one-sided cashes.
So it must return something that enables BAnr.


Hashing
-------
a. Trick (maxTricks 4 bits, cashTricks 2*4 bits)
b. Rank (maxRanks 4 bits, cashRanks 2*4 bits)
c. Case (something with d and a)
d. Minrank (b with minRanks, 4 bits more)

        Bits    Reduced rbits   Buckets Avg length
a       12      132      8       132    210.94  Trick
b       12      399      9                      Rank
c                20      5                      Case
d       16      593     10                      Minrank

a*b                     17      1859     17.64
a*c                     13       371    100.50
b*c                     14       907     54.64  RankCase
a*d                     18      2384     11.68
c*d

a*(b*c)                 18      3100      9.90
a*(c*d)                 19?     3725      7.11
a*(c*d)                 19?     3442      6.72  With fix

The move structs have now gotten so large that they take a long 
time to copy around.


Output files
------------
Loop over NUMBOTTOMS to see when low ranks matter.
determine overall size of two file tables
output the moves (how many) as code to compile, or as third table?
functions for writing and reading them
time the lookup of all individual suits (no caching)
choose a sensible cutoff between file size and speed
