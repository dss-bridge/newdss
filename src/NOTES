SimpleMoves
-----------
OK for now.
Later, swap two functions around.


defMerged shrinks
-----------------
There are a couple of places where we merge to less than the product
of the two numbers of defenses:
9, e4a5
13, ea247f
They can be found where MergeSidesHard is called.

Ranks
-----
13, 38a47f
    AKT6
Q432      75
    J98

def1 has 6 in it, seems right.
def2: PP39+AA1- or PA4T.
West doesn't cover when T AND 9 are held.  How to recognize?
The merge then loses the 6: AA1A + PA36 <= PA4T (or PA49, or whatever).
This is actually true.  No reason to start with ace if you have a
AP move from elsewhere.

13, 9ab056
    A76
8         Q543
    KJT92

Looks a bit odd all round.
Idea:  If an AltList Compare produces rank diff, pick the one
with the highest minimum rank.



Moves   14700
Sum     34347 8926
Time    11:52
Gini    0.4809, 5298
Avg     4.3648


single.defp should be a single number.
In MoveList this should map to a set of numbers that are indices
for QT_ACE and QT_PARD (later, maybe others as well).


Remove GetKeyNew and GetKey
Change internal data structure of Header
Find bounds in Header on new internal data
Experiment with hashes, also end

Thoughts on two-move data structure
-----------------------------------
Modify DefList::MergeSides and WholeMove to keep moves separate.

Do merge them in GetCombinedMove, but hopefully not that complex,
as at most 10 cards.

Look at counts of moves and #d, #a.
Reduce size of arrays.

Can have individual hash functions, or smaller ones, for each type.


PLAN
====
* Get the algorithmic parts completely clean and solid

Is everything in cst.h still needed?


Table issues
------------
10, 0x81aa
    AKJT
-        9
    Q8765
Should just be BB5Q.
Currently fails to make a table

11, 0xa4f3
    AKQ85
764       9
    JT
Currently yields BA5Q or AB5J (right),
Currently fails to make a table

6, 0x92
    AKT
-         J
    Q9
Currently yields BA3K or AB3Q (right),
BB3Q by table (wrong -- why not flagged?)

9, 0xa252
    AJ7
-         98
    KQT6
BB4Q by solver, BB4K by table (why not flagged?)

10, 0x212a9
    AQT
-         J5
    K9876
Currently yields BB5Q directly (which is right),
BB5K by table.

13, 2e630
    AKQJ532
94        7
    T86
Currently yields BA7Q or AB7T (right),
BB7T by table (wrong)

13, 0x222e1
    AKQJ973
5        2
    T864
Currently yields BA7K or AB7T directly,
BB7T by complex table(?).  Why is this not flagged as diff?

Other code
----------

**** Think about storage for QT_ACE and QT_PARD separately,
     and also LHO/RHO (single 32b field, at least A/P?)


20.09.2015
----------
Reduction thoughts:
* Distinguish NT and suit play?!  Seems tough
* Defense leads to first trick

Approach:
* Get the simple counts down to 0
* Get the less-simple counts down to 0

SimpleMoves:
* Move the full-suit stuff before the stopped ones
  (will the full-suit code then get new cases causing
  it to fail?)
* SimpleMove loop into a function that can be called separately,
  returning a histogram.  Only in some cases do we then twiddle
  or otherwise expand
* Does loop have to be over declLen, or can we go to 2 loops, not 3?

LoopHold:
* Split full-suit combos out of the 64 functions into
  64 other functions
* Have a single central dispatch function which returns
  one of three histogram codes if it works
* Check that all branches are still active; renumber


General:
* Profile Guided Optimization, blogs.msdn.com/b/vcblog/archive/2008/11/12/pogo.aspx
  msdn.microsoft.com/en-us/library/fsk896zz.aspx
* No more const #define's
* Also compile with g++
* Make command-line interface so that we "never" have to recompile
* As few ints as possible, as few static_casts as possible


-------


20.06.2015
----------
Stopped28(): Rewrite with pa, pl, pp, pr

Call it HIST_STOPPED
Think about a HIST_SYMM (EQUAL and also DIFF)

25.05.15
--------
CashoutPard() must also deal with one-sided cashes.
So it must return something that enables BAnr.


Hashing
-------
a. Trick (maxTricks 4 bits, cashTricks 2*4 bits)
b. Rank (maxRanks 4 bits, cashRanks 2*4 bits)
c. Case (something with d and a)
d. Minrank (b with minRanks, 4 bits more)

        Bits    Reduced rbits   Buckets Avg length
a       12      132      8       132    210.94  Trick
b       12      399      9                      Rank
c                20      5                      Case
d       16      593     10                      Minrank

a*b                     17      1859     17.64
a*c                     13       371    100.50
b*c                     14       907     54.64  RankCase
a*d                     18      2384     11.68
c*d

a*(b*c)                 18      3100      9.90
a*(c*d)                 19?     3725      7.11
a*(c*d)                 19?     3442      6.72  With fix

The move structs have now gotten so large that they take a long 
time to copy around.


Output files
------------
Loop over NUMBOTTOMS to see when low ranks matter.
determine overall size of two file tables
output the moves (how many) as code to compile, or as third table?
functions for writing and reading them
time the lookup of all individual suits (no caching)
choose a sensible cutoff between file size and speed
